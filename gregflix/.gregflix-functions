#!/bin/bash

source $HOME/.tmdb-functions

GREGFLIX_PATH=~/dev/gregflix
GREGFLIX_SCRIPTS_PATH=$GREGFLIX_PATH/resources/scripts
GREGFLIX_DEV_DB_URI="datomic:free://localhost:4334/gregflix?password=123mudar"
GREGFLIX_PROD_DB_URI="datomic:free://gregflix.site:4334/gregflix?password=$GREGFLIX_DATOMIC_DB_PASS"

function changeEncoding {
    if file -i "$1.srt" |grep -q "iso-8859-1"; then
        iconv -f ISO-8859-1 -t UTF-8 "$1.srt" -o "$1.srt.tmp" &&
        mv "$1.srt.tmp" "$1.srt"
    fi
}

function 2vtt {
    changeEncoding "$1"
    srt2vtt "$1.srt"
}

function encodeVideo {
    ffmpeg -y -i "$1.mkv" -c:v libx264 -c:a aac -sn "$1.mp4"
    2vtt "$1"
}

function encodeAudio {
    ffmpeg -y -i "$1.mkv" -c:v copy -c:a aac -sn "$1.mp4"
    2vtt "$1"
}

function toMp4 {
    ffmpeg -y -i "$1.mkv" -c:v copy -c:a copy -map 0:v -map 0:1 -map 0:1 -sn "$1.mp4"
    2vtt "$1"
}

function gregflix-prod-upload-serie {
    SERIE_PATH=s3://gregflix/series/$2/s$3/e$4/$1.mp4
    TRACK_PATH=s3://gregflix/series/$2/s$3/e$4/$1.srt
    VTT_PATH=s3://gregflix/series/$2/s$3/e$4/$1.vtt

    s3cmd info $TRACK_PATH >/dev/null 2>&1

    if [[ $? -eq 0 ]]; then
        echo "Track already uploaded"
    else
        s3cmd put $1.srt s3://gregflix/series/$2/s$3/e$4/$1.srt -P --add-header='content-type':'text/srt' --mime-type='text/srt'
    fi

    s3cmd info $VTT_PATH >/dev/null 2>&1

    if [[ $? -eq 0 ]]; then
        echo "VTT already uploaded"
    else
        s3cmd put $1.vtt s3://gregflix/series/$2/s$3/e$4/$1.vtt -P --add-header='content-type':'text/vtt' --mime-type='text/vtt'
    fi

    s3cmd info $SERIE_PATH >/dev/null 2>&1

    if [[ $? -eq 0 ]]; then
        echo "Serie already uploaded"
    else
        s3cmd put $1.mp4 s3://gregflix/series/$2/s$3/e$4/$1.mp4 -P --add-header='content-type':'video/mp4' --mime-type='video/mp4'
    fi
}

function gregflix-prod-upload-movie {
    MOVIE_PATH=s3://gregflix/movies/$2/$1.mp4
    TRACK_PATH=s3://gregflix/movies/$2/$1.srt
    VTT_PATH=s3://gregflix/movies/$2/$1.vtt

    s3cmd info $TRACK_PATH >/dev/null 2>&1

    if [[ $? -eq 0 ]]; then
        echo "Track already uploaded"
    else
        s3cmd put $1.srt $TRACK_PATH -P --add-header='content-type':'text/srt' --mime-type='text/srt'
    fi

    s3cmd info $VTT_PATH >/dev/null 2>&1

    if [[ $? -eq 0 ]]; then
        echo "VTT already uploaded"
    else
        s3cmd put $1.vtt $VTT_PATH -P --add-header='content-type':'text/vtt' --mime-type='text/vtt'
    fi

    s3cmd info $MOVIE_PATH >/dev/null 2>&1

    if [[ $? -eq 0 ]]; then
        echo "Movie already uploaded"
    else
        s3cmd put $1.mp4 $MOVIE_PATH -P --add-header='content-type':'video/mp4' --mime-type='video/mp4'
    fi
}

function gregflix-prod-upload-serie-track {
    s3cmd put $1.vtt s3://gregflix/series/$2/s$3/e$4/$1.vtt -P --add-header='content-type':'text/vtt' --mime-type='text/vtt'
    s3cmd put $1.srt s3://gregflix/series/$2/s$3/e$4/$1.srt -P --add-header='content-type':'text/srt' --mime-type='text/srt'
}

function gregflix-prod-upload-movie-track {
    TRACK_PATH=s3://gregflix/movies/$2/$1.srt
    VTT_PATH=s3://gregflix/movies/$2/$1.vtt

    s3cmd put $1.srt $TRACK_PATH -P --add-header='content-type':'text/srt' --mime-type='text/srt'
    s3cmd put $1.vtt $VTT_PATH -P --add-header='content-type':'text/vtt' --mime-type='text/vtt'
}

function gregflix-prod-db-add-movie {
    MOVIE_EXISTS=$(lein exec $GREGFLIX_SCRIPTS_PATH/movie_exists.clj $GREGFLIX_PROD_DB_URI $2)

    if [ "$MOVIE_EXISTS" = "1" ]; then
        echo "Movie already in DB"
        return
    fi

    echo "Inserting into db for $1 - $2 - $3 - $4"

    lein exec $GREGFLIX_SCRIPTS_PATH/add_movie.clj $GREGFLIX_PROD_DB_URI $1 $2 $3 $4

    echo "Movie inserted successfully!"
}

function gregflix-prod-db-add-serie {
    SERIE_EXISTS=$(lein exec $GREGFLIX_SCRIPTS_PATH/serie_exists.clj $GREGFLIX_PROD_DB_URI $2 $4 $5)

    if [ "$SERIE_EXISTS" = "1" ]; then
        echo "Serie already in DB"
        return
    fi

    echo "Inserting into db for $1 - $2 - $3 - $4 - $5 - $6 - $7"

    lein exec $GREGFLIX_SCRIPTS_PATH/add_serie.clj $GREGFLIX_PROD_DB_URI $1 $2 $3 $4 $5 $6 $7

    echo "Serie inserted successfully!"
}

function gregflix-prod-process-video {
    if [ "$#" -eq 7 ] || [ "$#" -eq 4 ] || [ "$#" -eq 5 ] || [ "$#" -eq 3 ]; then
        
        if [ ! -f "$3.mp4" ]; then
            if mediainfo --Inform="Video;Codec=%CodecID%" "$3.mkv" |grep -q 'MPEG4'; then
                toMp4 "$3"
            else
                encodeVideo "$3"
            fi
        fi

        if [ ! -f "$3.vtt" ]; then 
            2vtt "$3"
        fi

        if [ "$#" -eq 7 ] || [ "$#" -eq 5 ]; then
        	EPISODE_NAME="${6:=$(getEpisodeName $1 $4 $5)}"
        	EPISODE_NAME=${EPISODE_NAME//\'}
        	EPISODE_NAME=${EPISODE_NAME//\"}
        	EPISODE_DESCRIPTION="${7:=$(getEpisodeDescription $1 $4 $5)}"
        	EPISODE_DESCRIPTION=${EPISODE_DESCRIPTION//\'}
        	EPISODE_DESCRIPTION=${EPISODE_DESCRIPTION//\"}

            gregflix-prod-upload-serie $3 $2 $4 $5
            gregflix-prod-db-add-serie $1 $2 $3 $4 $5 $EPISODE_NAME $EPISODE_DESCRIPTION
        else
        	MOVIE_DESCRIPTION="${4:=$(getMovieDescription $1)}"

            gregflix-prod-upload-movie $3 $2
            gregflix-prod-db-add-movie $1 $2 $3 $MOVIE_DESCRIPTION
        fi

        return
    fi

    echo "inform all parameters:\n\nFor Serie:\n1-Name\n2-Slug\n3-File name\n4-Season\n5-Episode\n6-Episode name\n7-Episode description\n\nFor Movie:\n1-Name\n2-Slug\n3-File name\n4-Description"
    return 1
}

function gregflix-dev-db-create-user {
    lein exec $GREGFLIX_SCRIPTS_PATH/create_user.clj $GREGFLIX_DEV_DB_URI $1 $2 $3
}

function gregflix-prod-db-create-user {
    lein exec $GREGFLIX_SCRIPTS_PATH/create_user.clj $GREGFLIX_PROD_DB_URI $1 $2 $3
}

function gregflix-dev-dump {
    docker start datomic
    docker exec datomic bin/datomic -Xmx4g -Xms4g backup-db $GREGFLIX_DEV_DB_URI file:backup
    docker cp datomic:/datomic/backup ~/Documents/gregflix/backups/datomic/backup-dev-$(date +%d-%m-%Y)
}

function gregflix-prod-dump {
    docker start datomic
    docker exec datomic bin/datomic -Xmx4g -Xms4g backup-db $GREGFLIX_PROD_DB_URI file:backup-prod
    docker cp datomic:/datomic/backup-prod/ ~/Documents/gregflix/backups/datomic/backup-prod-$(date +%d-%m-%Y)
}

function gregflix-dev-restore-dump {
    docker cp ~/Documents/gregflix/backups/datomic/backup-prod-$1-$2-$3 datomic:/datomic/backup
    docker exec datomic bin/datomic -Xmx4g -Xms4g restore-db file:backup "$GREGFLIX_DEV_DB_URI"
}

function gregflix-prod-restore-dump {
    scp -r ~/Documents/gregflix/backups/datomic/backup-prod-$1-$2-$3 root@$CAC3_IP:backup-prod
    sshcac3 'docker cp backup-prod datomic:/datomic/backup-prod'
    sshcac3 'docker exec datomic bin/datomic -Xmx4g -Xms4g restore-db file:backup-prod "$GREGFLIX_PROD_DB_URI"'
}